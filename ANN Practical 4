import numpy as np
class ART:
  def __init__(self,input_size,rho,alpha):
    self.W= np.ones(input_size)
    self.rho= rho
    self.alpha= alpha
    
    def predict(self, x):
     y = np.dot(x, self.W) / np.sum(self.W) 
     return y
     
    def learn(self, x):
     y = self.predict(x)
  if np.sum(x) >= self.rho: 
    self.W= self.W+ self.alpha*(x-self.w*y)
    
    X = np.array([
        [1, 1, 0, 0],
        [0, 0, 1, 1],
        [1, 0, 0, 1],
        [0, 1, 1, 0]
        ])
        
input_size = X.shape[1]
rho = 2 
alpha = 0.1 
art = ART (input_size, rho, alpha, X)

for x in X:
  art.learn(x)
  
y1 = art.predict(np.array([1, 1, 0, 0])) 
y2 = art.predict(np.array([0, 0, 1, 1])) 
y3 = art.predict(np.array([1, 0, 1, 0]))

print(y1) 
print(y2) 
print(y3)
